/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NanoGUI.java
 *
 * Created on Jan 26, 2010, 10:28:03 PM
 */
package nano.envnt3D.tools;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
import help.About;
import help.HelpContent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.LinkedList;
import javax.help.CSH;
import javax.imageio.ImageIO;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsContext3D;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Raster;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import nano.envnt3D.Interface3D;

/**
 *
 * @author mufthas
 */
public class NanoGUI extends javax.swing.JFrame {

    private Color RGBColor = new Color(0, 0, 255);
    static boolean isCanvas3D;
    private ImageComponent2D imageComponent = null;
    HelpContent content;

    /** Creates new form NanoGUI */
    public NanoGUI() {

        initComponents();
        Interface3D.setDefaultSizeofCanvas(panelM.getHeight(), panelM.getWidth());
        URL myurl = this.getClass().getResource("Images/icon2.png");
        ImageIcon icon = new ImageIcon(myurl);
        this.setIconImage(icon.getImage());
        jInternalFrame1.setFrameIcon(icon);
        content = new HelpContent();
        jMenuItemHelpCont.addActionListener(new CSH.DisplayHelpFromSource(content.hb));


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        panelL = new javax.swing.JPanel();
        panelM = new javax.swing.JPanel();
        toolbarTop = new javax.swing.JToolBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuSave = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        menuBackGround = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemHelpCont = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ninithi - Software for Nanotechnology");
        setName("FrameGUI"); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Settings");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setVisible(true);

        panelL.setAutoscrolls(true);
        panelL.setMinimumSize(new java.awt.Dimension(512, 512));
        panelL.setPreferredSize(new java.awt.Dimension(300, 660));
        panelL.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 781, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrame1Layout.createSequentialGroup()
                    .addComponent(panelL, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        panelM.setLayout(new java.awt.BorderLayout());

        toolbarTop.setFloatable(false);
        toolbarTop.setRollover(true);

        jMenu1.setText("File");

        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenuTools.setText("Tools");
        jMenuBar1.add(jMenuTools);

        jMenu4.setText("Settings");

        jMenu5.setText("Color");

        menuBackGround.setText("Background");
        menuBackGround.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBackGroundActionPerformed(evt);
            }
        });
        jMenu5.add(menuBackGround);

        jMenu4.add(jMenu5);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Help");

        jMenuItemHelpCont.setText("Help Contents");
        jMenu3.add(jMenuItemHelpCont);

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelM, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE))
                    .addComponent(toolbarTop, javax.swing.GroupLayout.PREFERRED_SIZE, 1249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolbarTop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelM, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jInternalFrame1))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("static-access")
    private void menuBackGroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBackGroundActionPerformed
        // TODO add your handling code here:
        JDialog dialog = jColorChooser1.createDialog(this, "Choose Background Color....", true, jColorChooser1, colorChooserOK, colorChooserCancel);
        dialog.setVisible(true);
    }//GEN-LAST:event_menuBackGroundActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        // TODO add your handling code here:

        BufferedImage bufImage = getScreenShot(panelM);
        JFileChooser filechooser = new JFileChooser();
        FileFilter ff1 = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
       // FileFilter ff2 = new FileNameExtensionFilter("BMP file", "bmp");
        //FileFilter ff3 = new FileNameExtensionFilter("PNG file", "png");
        filechooser.addChoosableFileFilter(ff1);
        //filechooser.addChoosableFileFilter(ff2);
        //filechooser.addChoosableFileFilter(ff3);



        int ret = filechooser.showSaveDialog(this);
        if (ret == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File f = filechooser.getSelectedFile();
        String des = filechooser.getFileFilter().getDescription();
        String ext = "jpg";
        if (des.equals("JPEG file")) {
            ext = "jpg";
        }
        if (des.equals("BMP file")) {
            ext = "bmp";
        }
        if (des.equals("PNG file")) {
            ext = "png";
        }


        try {
             ext = "jpg";  // png, bmp (j2se 1.5+), gif (j2se 1.6+)


            
            FileOutputStream fileOut = new FileOutputStream(f.toString() + ".jpg");

            JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(fileOut);
            encoder.encode(bufImage);



            fileOut.flush();
            fileOut.close();
             
             

            //ImageIO.write(bufImage, ext, f);
        } catch (Exception e) {
           // System.err.println("Failed to save image: " + e);
        }


    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        Canvas3D canvas = Interface3D.getcanvas3D();
        System.out.print("Size : width= " + panelM.getWidth() + "  height= " + panelM.getHeight() + "\n");
        System.out.print("Canvas Size : width= " + canvas.getWidth() + "  height= " + canvas.getHeight() + "\n");
    }//GEN-LAST:event_formMouseClicked

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // TODO add your handling code here:
        About abt=new About();
        abt.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    protected BufferedImage getScreenShot(JPanel window) {

        /*
        Canvas3D canvas = Interface3D.getcanvas3D();
        Point p = new Point();
        p = canvas.getLocationOnScreen();
        Rectangle bounds = new Rectangle(p.x, p.y, panelM.getWidth(), panelM.getHeight());

        try{
        Robot robot = new Robot(window.getGraphicsConfiguration().getDevice());
        return robot.createScreenCapture(bounds);
        }catch (Exception e){
        e.printStackTrace();
        return null;
        }
         *
         */


        Canvas3D canvas3d = Interface3D.getcanvas3D();
        GraphicsContext3D ctx = canvas3d.getGraphicsContext3D();
        Dimension scrDim = canvas3d.getSize();

        ImageComponent2D image = new ImageComponent2D(ImageComponent.FORMAT_RGB, scrDim.width, scrDim.height);

        Raster ras = new Raster();
        ras.setType(Raster.RASTER_COLOR);
        ras.setCapability(Raster.ALLOW_IMAGE_READ);
        ras.setCapability(Raster.ALLOW_IMAGE_WRITE);

        ras.setSize(scrDim);
        ras.setImage(image);

        ctx.readRaster(ras);
        BufferedImage img = ras.getImage().getImage();

        return img;

    }
    ActionListener colorChooserOK = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            RGBColor = jColorChooser1.getColor();
            Interface3D.setBackGround(RGBColor);

        }
    };
    ActionListener colorChooserCancel = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent ae) {
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NanoGUI().setGUI();

            }
        });
    }

    public void setJPanelL(JPanel panel) {

        panelL.removeAll();
        panelL.validate();
        panelL.add(panel);
        panelL.validate();


    }

    public static JPanel getJPanelL() {
        return panelL;
    }

    public static void setJPanelM(JPanel com) {
        isCanvas3D = false;
        panelM.removeAll();
        panelM.validate();
        panelM.add(com);
        panelM.validate();

    }

    public static void setJPanelM(Canvas3D com) {
        isCanvas3D = true;
        panelM.removeAll();
        panelM.validate();
        panelM.add(com);
        panelM.validate();

    }

    public static boolean getIsCanvas() {
        return isCanvas3D;
    }

    public static JPanel getJPanelM() {
        return panelM;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemHelpCont;
    private javax.swing.JMenuItem jMenuSave;
    private static javax.swing.JMenu jMenuTools;
    private javax.swing.JMenuItem menuBackGround;
    private static javax.swing.JPanel panelL;
    private static javax.swing.JPanel panelM;
    private javax.swing.JToolBar toolbarTop;
    // End of variables declaration//GEN-END:variables

    public void setGUI() {



        panelM.add(Interface3D.createPanel());
        isCanvas3D = true;

        URL url = this.getClass().getResource("Images/save.png");
        Icon icon = new ImageIcon(url);
        JButton butSave = new JButton(icon);
        butSave.setPreferredSize(new Dimension(50, 50));
        butSave.setToolTipText("Save As..");
        butSave.setVerticalTextPosition(SwingConstants.BOTTOM);
        butSave.setHorizontalTextPosition(SwingConstants.CENTER);
        JPanel pan = new JPanel();
        pan.setLayout(new BoxLayout(pan, BoxLayout.X_AXIS));
        pan.add(butSave);
        toolbarTop.add(pan);
///-------------------Loading Modules-------------------------------------------------------------------------------

        nano.envnt3D.tools.swnt.LoadModule module2 = new nano.envnt3D.tools.swnt.LoadModule();
        toolbarTop.add(module2.createButtons());

        nano.envnt3D.tools.fullerine.LoadModule module = new nano.envnt3D.tools.fullerine.LoadModule();
        toolbarTop.add(module.createButtons());

        // nano.envnt3D.tools.customDesigner.LoadModule module3 = new nano.envnt3D.tools.customDesigner.LoadModule();
        //toolbarTop.add(module3.createButtons());
        // this.add(Interface3D.createPanel());

        nano.envnt3D.tools.mwnt.LoadModule module4 = new nano.envnt3D.tools.mwnt.LoadModule();
        toolbarTop.add(module4.createButtons());


///------------------End of Loading Modules----------------------------------------------------------------------------------
        SideView sv = new SideView();
        toolbarTop.add(sv.createButtons());
        addHelpIButton();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setVisible(true);

        butSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                jMenuSaveActionPerformed(e);
            }
        });



    }

    public static int[] getPanelMsize() {
        int[] i = {panelM.getWidth(), panelM.getHeight()};
        return i;
    }

    public void createTree(LinkedList ll) {
        if (ll.size() != 0) {

            DefaultMutableTreeNode head = new DefaultMutableTreeNode("ROOT");
            for (int i = 0; i < ll.size(); i++) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(i);
                head.add(node);
            }
            DefaultTreeModel treeModel = new DefaultTreeModel(head);
            //jTree1.setModel(treeModel);
        }
    }

    public static void addMenuItem(JMenuItem item) {
        jMenuTools.add(item);
    }

    private void addHelpIButton() {
        URL myurl = this.getClass().getResource("Images/help.png");
        Icon icon = new ImageIcon(myurl);

        JButton b1 = new JButton(icon);
        b1.setPreferredSize(new Dimension(50, 50));
        b1.setToolTipText("Help");
        b1.setVerticalTextPosition(SwingConstants.BOTTOM);
        b1.setHorizontalTextPosition(SwingConstants.CENTER);
        JPanel p = new JPanel();
        p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));
        p.add(b1);
        toolbarTop.add(p);
        b1.addActionListener(new CSH.DisplayHelpFromSource(content.hb));


    }
}
