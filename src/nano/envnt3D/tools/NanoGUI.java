/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NanoGUI.java
 *
 * Created on Jan 26, 2010, 10:28:03 PM
 */

package nano.envnt3D.tools;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
import com.sun.j3d.exp.swing.JCanvas3D;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.util.LinkedList;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.ImageComponent2D;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import nano.envnt3D.Interface3D;
import nano.envnt3D.tools.mwnt.LoadModule;


/**
 *
 * @author mufthas
 */
public class NanoGUI extends javax.swing.JFrame {

    private Color RGBColor=new Color(0, 0, 255);
    static boolean isCanvas3D;
    private ImageComponent2D imageComponent = null;
    /** Creates new form NanoGUI */
    public NanoGUI() {
        
        initComponents();
        Interface3D.setDefaultSizeofCanvas(panelM.getHeight(), panelM.getWidth());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        panelL = new javax.swing.JPanel();
        panelM = new javax.swing.JPanel();
        toolbarTop = new javax.swing.JToolBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuSave = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        menuBackGround = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nano builder v 1.0 Beta");
        setName("FrameGUI"); // NOI18N

        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Settings");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setVisible(true);

        panelL.setAutoscrolls(true);
        panelL.setMinimumSize(new java.awt.Dimension(512, 512));
        panelL.setPreferredSize(new java.awt.Dimension(300, 660));
        panelL.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrame1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelL, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(24, Short.MAX_VALUE)))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 810, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrame1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelL, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        panelM.setPreferredSize(new java.awt.Dimension(600, 600));
        panelM.setLayout(new java.awt.BorderLayout());

        toolbarTop.setFloatable(false);
        toolbarTop.setRollover(true);

        jMenu1.setText("File");

        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuItem1.setText("Exit");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setText("jMenuItem3");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Settings");

        jMenu5.setText("Color");

        menuBackGround.setText("Background");
        menuBackGround.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBackGroundActionPerformed(evt);
            }
        });
        jMenu5.add(menuBackGround);

        jMenu4.add(jMenu5);

        jMenuItem5.setText("jMenuItem5");
        jMenu4.add(jMenuItem5);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Help");

        jMenuItem2.setText("Help Contents");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelM, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE))
                    .addComponent(toolbarTop, javax.swing.GroupLayout.PREFERRED_SIZE, 1314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolbarTop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelM, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("static-access")
    private void menuBackGroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBackGroundActionPerformed
        // TODO add your handling code here:
        JDialog dialog=jColorChooser1.createDialog(this, "Choose Background Color....", true, jColorChooser1, colorChooserOK, colorChooserCancel);
        dialog.setVisible(true);
    }//GEN-LAST:event_menuBackGroundActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        // TODO add your handling code here:

        BufferedImage bufImage=getScreenShot(panelM);
        JFileChooser filechooser=new JFileChooser();
        //FileFilter ff=new FileNameExtensionFilter(null, "*.jpg,*.bmp");
        //filechooser.addChoosableFileFilter(ff);
        int ret=filechooser.showSaveDialog(this);
        if(ret==JFileChooser.CANCEL_OPTION) return;
        File f=filechooser.getSelectedFile();

      

    try {
      FileOutputStream fileOut = new FileOutputStream(f.toString()+".jpg");

      JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(fileOut);
      encoder.encode(bufImage);
      
      

      fileOut.flush();
      fileOut.close();
    } catch (Exception e) {
      System.err.println("Failed to save image: " + e);
    }

    System.out.println("Saved image as");
    }//GEN-LAST:event_jMenuSaveActionPerformed


    protected BufferedImage getScreenShot(JPanel window) {
	Canvas3D canvas = Interface3D.getcanvas3D();
	Point p = new Point();
	p = canvas.getLocationOnScreen();
	Rectangle bounds = new Rectangle(p.x, p.y, canvas.getWidth(), canvas.getHeight());
	try{
		Robot robot = new Robot(window.getGraphicsConfiguration().getDevice());
		return robot.createScreenCapture(bounds);
	}catch (Exception e){
		e.printStackTrace();
		return null;
		}
	}



    ActionListener colorChooserOK=new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            RGBColor=jColorChooser1.getColor();
            Interface3D.setBackGround(RGBColor);

        }
    };



    ActionListener colorChooserCancel=new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent ae) {
            
        }
    };
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NanoGUI().setGUI();
               
            }
        });
    }

    public void setJPanelL(JPanel panel){
        
        panelL.removeAll();
        panelL.validate();
        panelL.add(panel);
        panelL.validate();
         
         
    }

    public static JPanel getJPanelL(){
       return panelL;
    }
    public static void setJPanelM(JPanel com) {
        isCanvas3D=false;
        panelM.removeAll();
        panelM.validate();
        panelM.add(com);
        panelM.validate();
        
    }

    public static void setJPanelM(Canvas3D com) {
        isCanvas3D=true;
        panelM.removeAll();
        panelM.validate();
        panelM.add(com);
        panelM.validate();
        
    }

    public static boolean getIsCanvas(){
        return isCanvas3D;
    }

    public static JPanel getJPanelM(){
       return panelM;
    }
     
     
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenuItem menuBackGround;
    private static javax.swing.JPanel panelL;
    private static javax.swing.JPanel panelM;
    private javax.swing.JToolBar toolbarTop;
    // End of variables declaration//GEN-END:variables

    

    public void setGUI(){

        

        panelM.add(Interface3D.createPanel());
        isCanvas3D=true;

        nano.envnt3D.tools.swnt.LoadModule module2=new nano.envnt3D.tools.swnt.LoadModule();
        toolbarTop.add(module2.createButtons());
               
        nano.envnt3D.tools.fullerine.LoadModule module=new nano.envnt3D.tools.fullerine.LoadModule();
        toolbarTop.add(module.createButtons());

        nano.envnt3D.tools.customDesigner.LoadModule module3= new nano.envnt3D.tools.customDesigner.LoadModule();
        toolbarTop.add(module3.createButtons());
       // this.add(Interface3D.createPanel());

        nano.envnt3D.tools.mwnt.LoadModule module4=new nano.envnt3D.tools.mwnt.LoadModule();
        toolbarTop.add(module4.createButtons());

        SideView sv= new SideView();
        toolbarTop.add(sv.createButtons());
        this.setVisible(true);
            
         
    }
    public static int[] getPanelMsize() {
        int[] i={panelM.getWidth(),panelM.getHeight()};
        return i;
    }

    public void createTree(LinkedList ll){
        if (ll.size()!=0){

            DefaultMutableTreeNode head=new DefaultMutableTreeNode("ROOT");
            for (int i=0;i<ll.size();i++){
                DefaultMutableTreeNode node=new DefaultMutableTreeNode(i);
                head.add(node);
            }
            DefaultTreeModel treeModel=new DefaultTreeModel(head);
            //jTree1.setModel(treeModel);
        }
    }
}
